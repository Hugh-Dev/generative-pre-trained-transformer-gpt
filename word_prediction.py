from transformers import GPT2LMHeadModel, GPT2Tokenizer
import torch

# Hugging Face Transformers: https://huggingface.co/transformers/
def predict_next_words(input_text, max_length=20, num_return_sequences=1):
    """
    Predict the next words in a sequence using a pre-trained GPT-2 model.
    Args:
        input_text (str): The input text to base the predictions on.
        max_length (int, optional): The maximum length of the generated sequence. Defaults to 10.
        num_return_sequences (int, optional): The number of sequences to return. Defaults to 1.
    Returns:
        str: The predicted text generated by the model.
    """
    try:
        # tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
        # model = GPT2LMHeadModel.from_pretrained("gpt2")
        tokenizer = GPT2Tokenizer.from_pretrained("datificate/gpt2-small-spanish")
        model = GPT2LMHeadModel.from_pretrained("datificate/gpt2-small-spanish")
    except Exception as e:
        print(f"Error loading model or tokenizer: {e}")
        return ""

    tokenizer.pad_token = tokenizer.eos_token
    
    try:
        input_ids = tokenizer.encode(input_text, return_tensors="pt")
        attention_mask = torch.ones(input_ids.shape, device=input_ids.device)
    except Exception as e:
        print(f"Error encoding input text: {e}")
        return ""

    try:
        output = model.generate(
            input_ids,
            attention_mask=attention_mask,
            max_length=max_length+30,         
            num_return_sequences=num_return_sequences, 
            temperature=0.5,       
            top_k=50,              
            top_p=0.8,             
            pad_token_id=tokenizer.pad_token_id,
            no_repeat_ngram_size=2,
            do_sample=True
        )
        predicted_text = tokenizer.decode(output[0], skip_special_tokens=True)
    except Exception as e:
        print(f"Error generating text: {e}")
        return ""

    return predicted_text

def main():
    input_text = input(': ')
    predicted_text = predict_next_words(input_text)
    print(predicted_text)

if __name__ == "__main__":
    main()

